"use strict";

// init observation
const intersectionObserver = new IntersectionObserver((entries) => {
  	// If intersectionRatio is 0, the target is out of view
  	// and we do not need to do anything.
  	if (entries[0].intersectionRatio <= 0) return;

  	// call read message function
  	let $target = $(entries[0].target);
  	window[$target.attr('data-read-message')]($target.attr('id'), $target);
});

// start observing read message elements
function startObservation () {
	Array.from(document.querySelectorAll('[data-read-message]'))
		.map(elem => intersectionObserver.observe(elem) )
}

// remove message element from the observation
function removeElementObservation( $element ) {
	if ( $element.length ) {
		intersectionObserver.unobserve($element[0]);
	}
}

// load contacts
function loadContacts( receiver_id = 0 ) {
	$.ajax({
		url: URL_MESSAGING,
		type: 'get',
		dataType: 'json',
		async: false,
		cache: false,
		data: {
			receiver_id: receiver_id,
		},
		complete: response => {
			let resp = response.responseJSON;
			if ( resp.status ) {
				$('#contact-list-wrapper').html(resp.data.view);
			}
		},
	});
}

// read message
function readMessage ( message_id, $element ) {
	console.log('readMessage message_id, $element', message_id, $element)
	$.ajax({
		url: URL_MESSAGING_MARK_AS_READ,
		type: 'post',
		dataType: 'json',
		async: false,
		cache: false,
		data: {
			message_id: message_id,
		},
		complete: response => {
			let resp = response.responseJSON;
			if ( resp ) {
				if ( resp.status ) {
					// emit event that, receiver read the message to sender
					socket.emit('receiver-has-sender-message', resp.data);
					removeElementObservation( $element );
				} else {
					console.error(resp.message);
				}
			}
		},
	});
}

// Receive chat code
socket.on('broadcast-read-message', ( payload ) => {
	if ( Object.keys(payload).length ) {
		console.log('payload.message.sender_id == SENDER_ID', payload.message.sender_id,  SENDER_ID)
		if ( payload.message.sender_id == SENDER_ID ) {
			let $message = $(document).find(`#message-body-wrapper #${payload.message.id}`);
			console.log('$message', $message);
			if ( $message.length && !$message.find('.message-text-wrapper svg').length ) {
				$message.find('.message-text-wrapper').append(payload.readMessageView);

				removeElementObservation( $message );
			}
		}
	} else {
		console.log('call else', payload)
	}
});

// Receive chat code
socket.on('receiver-broadcast-message', ( payload ) => {
	if ( Object.keys(payload).length ) {
		let receiver_id = $('#receiver_id').val();
		
		console.log('receiver_id', receiver_id, 'SENDER_ID ', SENDER_ID)
		loadContacts( receiver_id );

		if ( payload.receiver_id == SENDER_ID && payload.sender_id == receiver_id ) {
			$.ajax({
				url: URL_RECEIVER_MESSAGE,
				type: 'post',
				dataType: 'json',
				data: payload,
				async: false,
				cache: false,
				complete: response => {
					let resp = response.responseJSON;
					if ( resp ) {
						if ( resp.status ) {
							if ( $('#message-body-wrapper').length ) {
								// append messsage in wapper and reset the message
								$(document).find('#message-body-wrapper').append( resp.data.view );

								// scroll down to latest messsage
								$('#message-body-wrapper').animate({ scrollTop: $('#message-body-wrapper').prop('scrollHeight')}, 1000);

								startObservation();
							}

						}
					}
				},
				error: error => {

				},
			});
			
		} else {
			console.log('call else')
		}
	}
});

// on load get contacts
$(document).ready(function() {
	loadContacts();
});

// create compose
$(document).on('click', '#compose', function(event) {
	event.preventDefault();
	$.ajax({
		url: URL_MESSAGING_COMPOSE,
		type: 'get',
		dataType: 'json',
		async: false,
		cache: false,
		complete: response => {
			let resp = response.responseJSON;
			if ( resp.status ) {
				makeOffcanvasModal('offcanvas-compose offcanvas-w-470 offcanvas-mt-210 offcanvas-border-yellow', resp.data.view, true);
			}
		},
	});
});

// reset value if type change
$(document).on('change', '#type', function(event) {
	$('#btn_sending_to').text('Send to');
	$('#sending_to').val('');
});

// open type base send to user modal
$(document).on('click', '#btn_sending_to', function(event) {
	let type = $('#type').val();
	let sending_to = $('#sending_to').val();

	if ( type ) {
		$.ajax({
			url: URL_FACILITY_USERS,
			type: 'post',
			dataType: 'json',
			data: {
				type: type,
				sending_to: sending_to,
			},
			complete: response => {
				let resp = response.responseJSON;
				if ( resp.status ) {
					makeOffcanvasModal('offcanvas-choose-user offcanvas-w-470 offcanvas-mt-210 offcanvas-border-yellow', resp.data.view, true);
				}
			},
		});
	}
});

// select user type
$(document).on('click', '#select-user', function(event) {
	event.preventDefault();
	let $selected_user = $(document).find('.radio-select-user:checked');
	if ( $selected_user.length ) {
		$('#sending_to').val($selected_user.val());

		let user_name = $.trim($(`#user-list label[for="${$selected_user.val()}"]`).html());
		$('#btn_sending_to').text(user_name)
		$('#offcanvas-choose-user').offcanvas('hide');
	}
});

// send messsage and store the data
$(document).on('click', '#compose-send', function(event) {
	event.preventDefault();
	let $form = $(document).find('#form-message-compose').serializeArray();

	$.ajax({
		url: URL_MESSAGING_COMPOSE_STORE,
		type: 'post',
		dataType: 'json',
		async: false,
		cache: false,
		data: $form,
		complete: response => {
			let resp = response.responseJSON;
			if ( resp ) {
				if ( resp.status ) {
					let payload = {
						sender_id: resp.data.message.sender_id,
						receiver_id: resp.data.message.receiver_id,
						message: resp.data.message.message,
						type: resp.data.message.type,
						message_id: resp.data.message.id,
					};

					// emit socket for send message
					socket.emit('sender-send-message', payload);

					// hide compose modal
					$(document).find('#offcanvas-compose').offcanvas('hide');

					// reload the contacts
					loadContacts();

					// show chat screen
					$(document).find(`a.open-chat[data-user-id="${resp.data.receiver_id}"]`).trigger('click');
				}
			}
		},
	});
});

// show user chat
$(document).on('click', '.open-chat', function(event) {
	event.preventDefault();
	if ( !$(this).hasClass('is-active') ) {
		let receiver_id = $(this).attr('data-user-id');
		$(document).find('.open-chat').removeClass('is-active');
		$(this).addClass('is-active');

		$.ajax({
			url: URL_MESSAGING_SHOW_USER_CHAT,
			type: 'get',
			dataType: 'json',
			async: false,
			cache: false,
			data: {
				sender_id: SENDER_ID,
				receiver_id: receiver_id,
			},
			complete: response => {
				let resp  = response.responseJSON;
				if ( resp ) {
					if ( resp.status ) {
						$(document).find('#chat-screen-wapper').html(resp.data.view);
						$('#message-body-wrapper').scrollTop($('#message-body-wrapper')[0].scrollHeight);
						startObservation();
					}
				}
			},
		});
	}
});

// Send chat code
$(document).on('click', '#btn-send-message', function(event) {
	event.preventDefault();
	let message = $.trim($('#message').val());
	let receiver_id = $('#receiver_id').val();

	if ( message.length ) {
		let payload = {
			sender_id: SENDER_ID,
			receiver_id: receiver_id,
			message: message,
			type: TYPE_TEXT,
		};

		$.ajax({
			url: URL_MESSAGES_STORE,
			type: 'post',
			dataType: 'json',
			data: payload,
			async: false,
			cache: false,
			complete: response => {
				let resp = response.responseJSON;
				if ( resp ) {
					if ( resp.status ) {
						// emit socket for send message
						payload['message_id'] = resp.data.message;
						socket.emit('sender-send-message', payload);

						// append messsage in wapper and reset the message
						$(document).find('#message-body-wrapper').append( resp.data.view );
						$('#message').val('');

						// scroll down to latest messsage
						$('#message-body-wrapper').animate({ scrollTop: $('#message-body-wrapper').prop('scrollHeight')}, 1000);

						// reload the contacts
						loadContacts( receiver_id );

					}
				}
			},
			error: error => {},
		});	
	}
});

